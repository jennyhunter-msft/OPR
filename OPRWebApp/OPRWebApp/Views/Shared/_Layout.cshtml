@using OPRWebApp.Models
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - OPR</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

    <script type="text/javascript">
        var appInsights = window.appInsights || function (config) {
            function r(config) { t[config] = function () { var i = arguments; t.queue.push(function () { t[config].apply(t, i) }) } } var t = { config: config }, u = document, e = window, o = "script", s = u.createElement(o), i, f; for (s.src = config.url || "//az416426.vo.msecnd.net/scripts/a/ai.0.js", u.getElementsByTagName(o)[0].parentNode.appendChild(s), t.cookie = u.cookie, t.queue = [], i = ["Event", "Exception", "Metric", "PageView", "Trace", "Ajax"]; i.length;) r("track" + i.pop()); return r("setAuthenticatedUserContext"), r("clearAuthenticatedUserContext"), config.disableExceptionTracking || (i = "onerror", r("_" + i), f = e[i], e[i] = function (config, r, u, e, o) { var s = f && f(config, r, u, e, o); return s !== !0 && t["_" + i](config, r, u, e, o), s }), t
        }({
            instrumentationKey: "c1e87387-42a5-44df-80be-602b566dfcc1"
        });

        window.appInsights = appInsights;
        appInsights.trackPageView();
    </script>
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("OPR", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                </ul>
                <ul class="nav navbar-nav navbar-right">
                    <li>
                        <button id="contextAdd" type="button" class="navbar-brand">???</button>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>
                @{
                    string sessionIDDisplay = "";
                    switch ((string)ViewBag.SessionId)
                    {
                        case @Constants.EmptySessionID:
                            sessionIDDisplay = "No Session ID Currently in use";
                            break;
                        case @Constants.InvalidSessionID:
                            sessionIDDisplay = "Current Session ID is invalid";
                            break;
                        default:
                            sessionIDDisplay = string.Format("Session ID : {0}", ViewBag.SessionId);
                            break;

                    }
                }
                @sessionIDDisplay
            </p>
            <p>
                @{
                    string pathIdDisplay = "";
                    switch ((string)ViewBag.PathId)
                    {
                        case @Constants.EmptyPathID:
                            pathIdDisplay = "No Path ID Currently in use";
                            break;
                        case @Constants.InvalidPathID:
                            pathIdDisplay = "Current Path ID is invalid";
                            break;
                        default:
                            pathIdDisplay = string.Format("Path ID : {0}", ViewBag.PathId);
                            break;

                    }
                }
                @pathIdDisplay
            </p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
    <script>
        $(document).ready(function () {
            if ("@ViewBag.SessionId" == "@Constants.EmptySessionID" || "@ViewBag.SessionId" == "@Constants.InvalidSessionID") {
                document.getElementById("contextAdd").innerHTML = "New Session";
                document.getElementById("contextAdd").onclick = function () { AddSession(); };
            }
            else if ("@ViewBag.PathId" == "@Constants.EmptyPathID" || "@ViewBag.PathId" == "@Constants.InvalidPathID") {
                document.getElementById("contextAdd").innerHTML = "New Path";
                document.getElementById("contextAdd").onclick = function() { AddPath(); };
            }
            else {
                document.getElementById("contextAdd").innerHTML = "Start Tracking";
                document.getElementById("contextAdd").onclick = function () { StartTracking(); };
            }
        });

        function AddSession() {
            $.ajax({
                url: '@Url.Action("AddSession", "Home")',
                type: 'POST',
                async: false,
                dataType: 'json',
                success: function (result) {
                    var url = '@Url.Action("Index", "Home", new { sessionId = "__id__" })';
                    window.location.href = url.replace('__id__', result);
                },
                error: function (result) {
                    alert($.parseJSON(result.responseText).error);
                }
            });
        }

        function AddPath() {
            $.ajax({
                url: '@Url.Action("AddPath", "Home")',
                type: 'POST',
                async: false,
                dataType: 'json',
                data: {
                    sessionId: "@ViewBag.SessionId"
                },
                success: function (result) {
                    var url = '@Url.Action("Index", "Home", new { sessionId = ViewBag.SessionId, pathId = "__pathId__" })';
                    window.location.href = url.replace('__pathId__', result);
                },
                error: function (result) {
                    alert($.parseJSON(result.responseText).error);
                }
            });
        }

        function StartTracking() {
            document.getElementById("contextAdd").innerHTML = "Stop Tracking";
            document.getElementById("contextAdd").onclick = function () { StopTracking() };

            //Request the user's location
            navigator.geolocation.getCurrentPosition(function (position) {
                var posLoc = new Microsoft.Maps.Location(
                    position.coords.latitude,
                    position.coords.longitude);

                //Add a pushpin to show the user's location.
                userPin = new Microsoft.Maps.Pushpin(posLoc, { visible: false });
                map.entities.push(userPin);

                //Watch the users location.
                watchId = navigator.geolocation.watchPosition(UsersLocationUpdated);
            });
        }

        function UsersLocationUpdated(position) {
            var loc = new Microsoft.Maps.Location(
                position.coords.latitude,
                position.coords.longitude);

            //Update the user pushpin.
            userPin.setLocation(loc);
            userPin.setOptions({ visible: true });

            //Center the map on the user's location.
            map.setView({ center: loc });
        }

        function StopTracking() {
            document.getElementById("contextAdd").innerHTML = "Start Tracking";
            document.getElementById("contextAdd").onclick = function () { StartTracking() };

            // Cancel the geolocation updates.
            navigator.geolocation.clearWatch(watchId);

            //Remove the user pushpin.
            map.entities.clear();
        }
    </script>
</body>
</html>
